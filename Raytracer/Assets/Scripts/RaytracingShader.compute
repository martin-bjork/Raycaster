#pragma kernel TraceRays

static const float PI = 3.14159265f;
static const float REFLECTION_OFFSET = 0.001f;
static const float INFINITY = 1.#INF;
static const float SKYBOX_STRENGTH = 10;

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

struct Sphere {
    float3 position;
    float radius;
    float4 albedo;
    float4 specular;
};

RWTexture2D<float4> Result;
float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
Texture2D<float4> SkyboxTexture;
SamplerState sampler_SkyboxTexture;
float2 PixelOffset;
float4 DirectionalLight;
StructuredBuffer<Sphere> Spheres;
float Sample;

float random(float2 v, float seed = 0) {
    float2 seeded = v + seed * float2(12345.6f, 9876.4f);
    float3 p3  = frac(seeded.xyx * 0.1031f);
    p3 += dot(p3, p3.yzx + 33.33f);
    return frac((p3.x + p3.y) * p3.z);
}

float sdot(float3 x, float3 y, float f = 1) {
    return saturate(dot(x, y) * f);
}

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1, 1, 1);
    return ray;
}

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0, 0, 0);
    hit.distance = INFINITY;
    hit.normal = float3(0, 0, 0);
    hit.albedo = float3(0, 0, 0);
    hit.specular = float3(0, 0, 0);
    return hit;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float2 CalculateUVFromGroupIndex(float2 id) {
    uint width;
    uint height;
    Result.GetDimensions(width, height);
    return float2((id + PixelOffset) / float2(width, height) * 2 - 1);
}

float3x3 GetTangentSpace(float3 normal) {
    float3 helper = abs(normal.x) > 0.99f ? float3(0, 0, 1) : float3(1, 0, 0);
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float2 pixel, float seed) {
    float cosTheta = random(pixel, seed);
    float sinTheta = sqrt(max(0, 1 - cosTheta * cosTheta));
    float phi = 2 * PI * random(pixel, seed + 123);
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

float3 SampleSkybox(float3 direction, float strength) {
    float theta = acos(direction.y) / -PI;
    float phi = atan2(direction.x, -direction.z) / -PI * 0.5f;
    return saturate(SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * strength);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0, 1, 0);
        bestHit.albedo = 0.6f * float3(1, 1, 1);
        bestHit.specular = 0.01f * float3(1, 1, 1);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    float3 d = ray.origin  - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0) {
        return;
    }
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo.rgb;
        bestHit.specular = sphere.specular.rgb;
    }
}

void IntersectSpheres(Ray ray, inout RayHit bestHit) {
    uint sphereCount;
    uint stride;
    Spheres.GetDimensions(sphereCount, stride);
    for (uint i = 0; i < sphereCount; i++) {
        IntersectSphere(ray, bestHit, Spheres[i]);
    }
}

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    IntersectSpheres(ray, bestHit);
    return bestHit;
}

float3 DiffuseShading(float3 normal, float3 albedo) {
    return saturate(-dot(normal, DirectionalLight.xyz)) * DirectionalLight.w * albedo;
}

bool CastShadowRay(RayHit hit) {
    Ray shadowRay = CreateRay(hit.position + hit.normal * REFLECTION_OFFSET, -DirectionalLight.xyz);
    RayHit shadowHit = Trace(shadowRay);
    return shadowHit.distance != INFINITY;
}

float3 Shade(inout Ray ray, RayHit hit, float2 pixel, float seed) {
    if (hit.distance < INFINITY) {
        ray.origin = hit.position + hit.normal * REFLECTION_OFFSET;
        ray.direction = SampleHemisphere(hit.normal, pixel, seed);
        ray.energy *= 2 * hit.albedo * sdot(hit.normal, ray.direction);
        return 0;
    } else {
        ray.energy = 0;
        return SampleSkybox(ray.direction, SKYBOX_STRENGTH);
    }
}

float3 TraceAndShade(Ray ray, float2 pixel, float seed) {
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++) {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit, pixel, seed + i);
        if (!any(ray.energy)) {
            break;
        }
    }
    return result;
}

[numthreads(8,8,1)]
void TraceRays (uint3 id : SV_DispatchThreadID) {

    float2 uv = CalculateUVFromGroupIndex(id.xy);

    Ray ray = CreateCameraRay(uv);

    float4 result = float4(TraceAndShade(ray, id.xy, Sample), 1);

    Result[id.xy] = result;
}
